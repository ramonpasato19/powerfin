package com.powerfin.actions.payroll;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;
import org.openxava.actions.SaveAction;
import org.openxava.jpa.XPersistence;
import org.openxava.model.MapFacade;
import org.openxava.util.Messages;
import org.openxava.validators.ValidationException;

import com.powerfin.helper.AccountStatusHelper;
import com.powerfin.helper.JPAHelper;
import com.powerfin.model.AccountStatus;
import com.powerfin.model.EmployeeContract;
import com.powerfin.model.PayrollProvisionVacation;
import com.powerfin.model.PayrollVacation;
import com.powerfin.model.PayrollVacationType;

/**
 * The Class save Payroll Vacation
 * 
 * @author Luis Ramon
 */

public class PayrollVacationSaveAction extends SaveAction {

	@SuppressWarnings("unchecked")
	@Override
	public void execute() throws Exception {
		validate();
		try {
			String payrollVacationId = getView().getRoot().getValueString("payrollVacationId");

			Map<String, String> payrollVacationType = (Map<String, String>) getView().getRoot().getValue("payrollVacationType");
			String payrollVacationTypeId = payrollVacationType.get("payrollVacationTypeId");
			Map<String, String> employeeContract = (Map<String, String>) getView().getRoot().getValue("employeeContract");
			String employeeContractId = employeeContract.get("employeeContractId");
			Date fromDate = (Date) getView().getRoot().getValue("fromDate");
			Date toDate = (Date) getView().getRoot().getValue("toDate");
			String remark = getView().getRoot().getValueString("remark");

			Map<String, String> accountStatus = (Map<String, String>) getView().getRoot().getValue("accountStatus");
			String accountStatusId = accountStatus.get("accountStatusId");

			Calendar fromCurrent = Calendar.getInstance();
			fromCurrent.setTime(fromDate);
			int dayFromDate = fromCurrent.get(Calendar.DAY_OF_MONTH);
			Calendar toCurrent = Calendar.getInstance();
			toCurrent.setTime(toDate);
			int dayToDate = toCurrent.get(Calendar.DAY_OF_MONTH);
			int daysVacation = dayToDate - dayFromDate;
						
			PayrollProvisionVacation payrollProvisionVacation = JPAHelper.getSingleResult(XPersistence.getManager()
					.createQuery(" SELECT ppv FROM EmployeeContract ec, EmployeeContractDetail ecd, PayrollProvisionVacation ppv "
							+"where ec.employeeContractId = ecd.employeeContract.employeeContractId "
							+"and ppv.employeeContractDetail.employeeContractDetailId = ecd.employeeContractDetailId "
							+"and ec.employeeContractId = :PACCOUNTID "
							+"and ec.accountStatus.accountStatusId = :PACCOUNTSTATUS "
							,PayrollProvisionVacation.class)
							.setParameter("PACCOUNTSTATUS", AccountStatusHelper.ACTIVE_ACCOUNT_STATUS_ID)
							.setParameter("PACCOUNTID",employeeContractId));
					
			if(payrollProvisionVacation != null ) {
				BigDecimal monetaryValue = payrollProvisionVacation.getMonetaryValue();
				BigDecimal dayValue = payrollProvisionVacation.getDayValue();
				System.out.println("valorrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr   "+  monetaryValue  );
				System.out.println("valor day   "+  dayValue  );

				if (payrollVacationId == null || payrollVacationId.isEmpty()) { //create
					System.out.println("create...........................");
					System.out.println("id   " + payrollVacationId);
					System.out.println("payrollVacationTypeName   " + payrollVacationTypeId);
					System.out.println("employeeContract;  " + employeeContractId);
					System.out.println("fecha;  +" + fromDate);
					System.out.println("fecha;  +" + toDate);
					System.out.println("dias   " + daysVacation);
					System.out.println("valor   " + monetaryValue);
					System.out.println("descripcion   " + remark);
					System.out.println("estado    " + accountStatusId);
	
					PayrollVacation payrollVacation = new PayrollVacation();
					payrollVacation.setPayrollVacationType(	XPersistence.getManager().find(PayrollVacationType.class, payrollVacationTypeId));
					payrollVacation.setEmployeeContract(XPersistence.getManager().find(EmployeeContract.class, employeeContractId));
					payrollVacation.setFromDate(fromDate);
					payrollVacation.setToDate(toDate);
					payrollVacation.setDaysVacation(daysVacation);
					payrollVacation.setMonetaryValue(monetaryValue);
					payrollVacation.setRemark(remark);
					payrollVacation.setAccountStatus(XPersistence.getManager().find(AccountStatus.class, accountStatusId));
					XPersistence.getManager().persist(payrollVacation);
					XPersistence.commit();
					addMessage("payroll_vacation_created", payrollVacation.getClass().getName());
					getView().refresh();
	
				} else if (payrollVacationId != null) { // edit
					System.out.println("edit..................");
					PayrollVacation payrollVacation = XPersistence.getManager().find(PayrollVacation.class,payrollVacationId);
	
					payrollVacation.setEmployeeContract(XPersistence.getManager().find(EmployeeContract.class, employeeContractId));
					payrollVacation.setFromDate(fromDate);
					payrollVacation.setToDate(toDate);
					payrollVacation.setDaysVacation(daysVacation);
					payrollVacation.setMonetaryValue(monetaryValue);
					payrollVacation.setRemark(remark);
					payrollVacation.setAccountStatus(XPersistence.getManager().find(AccountStatus.class, accountStatusId));
	
					XPersistence.getManager().merge(payrollVacation);
					XPersistence.commit();
	
					addMessage("payroll_vacation_modified", payrollVacation.getClass().getName());
					getView().refresh();
				}		
			}
			
			if(payrollProvisionVacation == null ) {
						addMessage("no_exist_data_payroll_provision_vacation", employeeContractId);	  
			}
			
		} catch (Exception e) {
			XPersistence.rollback();
			throw e;
		}
	}

	// Method validate fields of view except employeeContractId
	@SuppressWarnings("rawtypes")
	private void validate() throws Exception {
		Map map = getValuesToSave();
		map.remove("payrollVacationId");
		Messages errors = MapFacade.validate(getModelName(), map);
		if (errors.contains()) {
			throw new ValidationException(errors);
		}
	}
}
