package com.powerfin.actions.accountInvoice;

import java.math.BigDecimal;
import java.util.Map;
import org.openxava.actions.OnChangePropertyBaseAction;
import org.openxava.jpa.XPersistence;
import com.powerfin.model.AccountInvoiceDetail;
import com.powerfin.model.AccountItem;

/**
 * The persistent class for the unit_measure database table to show properties in view.
 * @Author Adrian Morales
 */

public class OnModifyItemPurchaseOrder extends OnChangePropertyBaseAction {

	@Override
	public void execute() throws Exception {

		AccountInvoiceDetail aid = new AccountInvoiceDetail();
		AccountItem ai = new AccountItem();
		getView().setValue("unitMeasure", " ");
		getView().setValue("lastUnitPrice", new BigDecimal("0.00"));
		getView().setValue("replacement",null);
		getView().getSubview("unitMeasureProvider").setValue("unitMeasure", " ");
		
		if (getNewValue() == null)
			return;
		Map<String, String> mapItem = (Map<String, String>) getView().getValue("accountDetail");
		if (mapItem!=null &&  mapItem.get("accountId")!=null) {
			AccountItem accountItem = XPersistence.getManager().find(AccountItem.class, mapItem.get("accountId"));
			if (accountItem!=null) {								
				getView().setValue("replacement",accountItem.getReplacement());
				getView().getSubview("unitMeasureProvider").setValue("unitMeasure", accountItem.getUnitMeasureProvider().getUnitMeasure());
			}			
		}
		try {
			ai = XPersistence.getManager().find(AccountItem.class, mapItem.get("accountId").toString());
			getView().setValue("unitMeasure", ai.getUnitMeasureBean().getName());
			getView().getSubview("unitMeasureProvider").setValue("unitMeasure", ai.getUnitMeasureProvider().getUnitMeasure());
		} catch (Exception e) {
			getView().setValue("unitMeasure", "N/D");
		}
		try {

			if (mapItem.get("accountId")!=null && !mapItem.get("accountId").isEmpty()) {
				aid = (AccountInvoiceDetail) XPersistence.getManager()
						.createQuery("select  aid from AccountInvoice ai ,Account a, AccountInvoiceDetail aid "
								+ "WHERE  a.accountId = ai.accountId"
								+ " AND  ai.accountId=aid.accountInvoice.accountId AND  a.product.productId= '202'"
								+ " AND  aid.accountDetail.accountId =:accountDetail ORDER by ai.issueDate desc ")
						.setMaxResults(1).setParameter("accountDetail", mapItem.get("accountId").toString())
						.getSingleResult();
				getView().setValue("lastUnitPrice", aid.getUnitPrice());
				getView().setValue("unitPrice", aid.getUnitPrice());
				getView().getSubview("tax").setValue("taxId", aid.getTax().getTaxId());
				getView().getSubview("tax").setValue("percentage", aid.getTax().getPercentage());
				getView().getSubview("tax").setValue("name", aid.getTax().getName());
			}
		} catch (Exception e) {
			getView().setValue("lastUnitPrice", new BigDecimal("0.00"));
			getView().setValue("unitPrice", new BigDecimal("0.00"));
			getView().getSubview("tax").setValue("taxId", "");
			getView().getSubview("tax").setValue("percentage", new BigDecimal("0.00"));
			getView().getSubview("tax").setValue("name", "");
		}
	}
}
